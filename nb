{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as st\n",
    "import pylab\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Загрузим данные из таблицы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Загрузим первый датафрейм звонки\n",
    "df_calls = pd.read_excel('/Users/leonid/Downloads/Задание.xlsx', sheet_name='call').drop([0]).drop('Unnamed: 5', axis=1)\n",
    "# удалили строку, дублирующую название колонок на русском и колонку, поясняющую result_id "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>task_id</th>\n",
       "      <th>call_id</th>\n",
       "      <th>agent_name</th>\n",
       "      <th>call_dt</th>\n",
       "      <th>call_result_id</th>\n",
       "      <th>call_time_sec</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>843083337</td>\n",
       "      <td>6645916908#16711160876</td>\n",
       "      <td>sakungurceva</td>\n",
       "      <td>2020-03-01 00:00:00</td>\n",
       "      <td>6</td>\n",
       "      <td>298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>843083337</td>\n",
       "      <td>6750206063#16711160876</td>\n",
       "      <td>sakungurceva</td>\n",
       "      <td>2020-03-17 00:00:00</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>843083337</td>\n",
       "      <td>6769109629#16711160876</td>\n",
       "      <td>sakungurceva</td>\n",
       "      <td>2020-03-24 00:00:00</td>\n",
       "      <td>6</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>843083337</td>\n",
       "      <td>6890964670#16711160876</td>\n",
       "      <td>sakungurceva</td>\n",
       "      <td>2020-04-15 00:00:00</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>843083337</td>\n",
       "      <td>6926247810#16711160876</td>\n",
       "      <td>lapleshivenkova</td>\n",
       "      <td>2020-04-15 00:00:00</td>\n",
       "      <td>3</td>\n",
       "      <td>1329</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     task_id                 call_id       agent_name              call_dt  \\\n",
       "1  843083337  6645916908#16711160876     sakungurceva  2020-03-01 00:00:00   \n",
       "2  843083337  6750206063#16711160876     sakungurceva  2020-03-17 00:00:00   \n",
       "3  843083337  6769109629#16711160876     sakungurceva  2020-03-24 00:00:00   \n",
       "4  843083337  6890964670#16711160876     sakungurceva  2020-04-15 00:00:00   \n",
       "5  843083337  6926247810#16711160876  lapleshivenkova  2020-04-15 00:00:00   \n",
       "\n",
       "  call_result_id call_time_sec  \n",
       "1              6           298  \n",
       "2              6             9  \n",
       "3              6           111  \n",
       "4              5             7  \n",
       "5              3          1329  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_calls.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Загрузим второй датафрейм задания\n",
    "df_tasks = pd.read_excel('/Users/leonid/Downloads/Задание.xlsx', sheet_name='task').drop(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>task_id</th>\n",
       "      <th>hid</th>\n",
       "      <th>finish_dt_task</th>\n",
       "      <th>base_id</th>\n",
       "      <th>task_result_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>843083337</td>\n",
       "      <td>36d2f49fc49f572677416d54536a41c6</td>\n",
       "      <td>2020-04-15 00:00:00</td>\n",
       "      <td>7553</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>844351919</td>\n",
       "      <td>ff34fad215457a0706186e347b6a3ac8</td>\n",
       "      <td>2020-04-27 00:00:00</td>\n",
       "      <td>7553</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>844406657</td>\n",
       "      <td>d9d9e1c6f5c95b3d8c72bb528bb06022</td>\n",
       "      <td>2020-04-10 00:00:00</td>\n",
       "      <td>7553</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>845152792</td>\n",
       "      <td>afdf70661693bbba8c31fb0b321b818c</td>\n",
       "      <td>2020-04-25 00:00:00</td>\n",
       "      <td>7553</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>845814859</td>\n",
       "      <td>9b3a7955c46a7e9658288cb8acc43eac</td>\n",
       "      <td>2020-04-05 00:00:00</td>\n",
       "      <td>7553</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     task_id                               hid       finish_dt_task base_id  \\\n",
       "1  843083337  36d2f49fc49f572677416d54536a41c6  2020-04-15 00:00:00    7553   \n",
       "2  844351919  ff34fad215457a0706186e347b6a3ac8  2020-04-27 00:00:00    7553   \n",
       "3  844406657  d9d9e1c6f5c95b3d8c72bb528bb06022  2020-04-10 00:00:00    7553   \n",
       "4  845152792  afdf70661693bbba8c31fb0b321b818c  2020-04-25 00:00:00    7553   \n",
       "5  845814859  9b3a7955c46a7e9658288cb8acc43eac  2020-04-05 00:00:00    7553   \n",
       "\n",
       "  task_result_id  \n",
       "1              6  \n",
       "2              6  \n",
       "3              5  \n",
       "4              5  \n",
       "5              3  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tasks.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Загрузим третий датафрейм - продукты\n",
    "df_products = pd.read_excel('/Users/leonid/Downloads/Задание.xlsx', sheet_name='result_product').drop(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hid</th>\n",
       "      <th>product_type_cd</th>\n",
       "      <th>approve_dt</th>\n",
       "      <th>reject_dt</th>\n",
       "      <th>using_dt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0004c6142b4bf98fdb51ec0fead099b0</td>\n",
       "      <td>INV</td>\n",
       "      <td>2020-05-21 00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0008ddccf50e9a72ee9c6223fb45e4c4</td>\n",
       "      <td>INV</td>\n",
       "      <td>2020-05-29 00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>000a2e5621a118118f42560c9821e6a1</td>\n",
       "      <td>INV</td>\n",
       "      <td>2020-04-27 00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020-04-29 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>001a43fffa79a5b60c01473eeff9fd1f</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020-04-01 00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>001c27126f4fd13cc4126d4906c48425</td>\n",
       "      <td>INV</td>\n",
       "      <td>2020-05-06 00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                hid product_type_cd           approve_dt  \\\n",
       "1  0004c6142b4bf98fdb51ec0fead099b0             INV  2020-05-21 00:00:00   \n",
       "2  0008ddccf50e9a72ee9c6223fb45e4c4             INV  2020-05-29 00:00:00   \n",
       "3  000a2e5621a118118f42560c9821e6a1             INV  2020-04-27 00:00:00   \n",
       "4  001a43fffa79a5b60c01473eeff9fd1f             INV                  NaN   \n",
       "5  001c27126f4fd13cc4126d4906c48425             INV  2020-05-06 00:00:00   \n",
       "\n",
       "             reject_dt             using_dt  \n",
       "1                  NaN                  NaN  \n",
       "2                  NaN                  NaN  \n",
       "3                  NaN  2020-04-29 00:00:00  \n",
       "4  2020-04-01 00:00:00                  NaN  \n",
       "5                  NaN                  NaN  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_products.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Предобработка данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Проверим на дубликаты"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_calls.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tasks.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_products.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# дубликаты не найдены"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Проверим на пропуски"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "task_id           0\n",
       "call_id           0\n",
       "agent_name        0\n",
       "call_dt           0\n",
       "call_result_id    0\n",
       "call_time_sec     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_calls.isna().sum() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "task_id           0\n",
       "hid               0\n",
       "finish_dt_task    0\n",
       "base_id           0\n",
       "task_result_id    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tasks.isna().sum() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "hid                   0\n",
       "product_type_cd       0\n",
       "approve_dt         2275\n",
       "reject_dt          3735\n",
       "using_dt           4038\n",
       "dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_products.isna().sum()\n",
    "# судя по всему пропуски связаны с тем, то пользователь может совершить не все действия"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5999, 5)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_products.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hid</th>\n",
       "      <th>product_type_cd</th>\n",
       "      <th>approve_dt</th>\n",
       "      <th>reject_dt</th>\n",
       "      <th>using_dt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>384</th>\n",
       "      <td>0ee28a3b82fc23356e5f33240c324c29</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>3bc14fa6929915ee34cfc2035a27c334</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1792</th>\n",
       "      <td>4b22d259df1ebefb70d5056de40effb0</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2725</th>\n",
       "      <td>7434403d315dc0dd7582abfb49b98414</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2862</th>\n",
       "      <td>7a190118d423efc20e7fe5d0d3b9d469</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2927</th>\n",
       "      <td>7ccf7ea51c4e50472085cd20a659a030</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3021</th>\n",
       "      <td>804dbacd5e814d62628b967ab835076d</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3369</th>\n",
       "      <td>8f393a26a2405776ec5d41a891831ae4</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3457</th>\n",
       "      <td>930d5efa433377e081609ba6f041aaa5</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4426</th>\n",
       "      <td>bd93d551d74f64fdfccef583d69ba856</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5848</th>\n",
       "      <td>f9b544ed4a72e0a90535f0adad73e1ec</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   hid product_type_cd approve_dt reject_dt  \\\n",
       "384   0ee28a3b82fc23356e5f33240c324c29             INV        NaN       NaN   \n",
       "1455  3bc14fa6929915ee34cfc2035a27c334             INV        NaN       NaN   \n",
       "1792  4b22d259df1ebefb70d5056de40effb0             INV        NaN       NaN   \n",
       "2725  7434403d315dc0dd7582abfb49b98414             INV        NaN       NaN   \n",
       "2862  7a190118d423efc20e7fe5d0d3b9d469             INV        NaN       NaN   \n",
       "2927  7ccf7ea51c4e50472085cd20a659a030             INV        NaN       NaN   \n",
       "3021  804dbacd5e814d62628b967ab835076d             INV        NaN       NaN   \n",
       "3369  8f393a26a2405776ec5d41a891831ae4             INV        NaN       NaN   \n",
       "3457  930d5efa433377e081609ba6f041aaa5             INV        NaN       NaN   \n",
       "4426  bd93d551d74f64fdfccef583d69ba856             INV        NaN       NaN   \n",
       "5848  f9b544ed4a72e0a90535f0adad73e1ec             INV        NaN       NaN   \n",
       "\n",
       "     using_dt  \n",
       "384       NaN  \n",
       "1455      NaN  \n",
       "1792      NaN  \n",
       "2725      NaN  \n",
       "2862      NaN  \n",
       "2927      NaN  \n",
       "3021      NaN  \n",
       "3369      NaN  \n",
       "3457      NaN  \n",
       "4426      NaN  \n",
       "5848      NaN  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  проверим, есть ли полностью пропущенные значения для действий клиента \n",
    "df_products[df_products[['approve_dt','reject_dt','using_dt']].isnull().all(axis = 1)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Пока непонятно как распряжаться с пропусками в таблице с действиями после продужи, так как мы не знаем специфику продукта. Предполагаю, что эти люди просто не совершили никаких действий. Держим это в голове, при дальшейшем соединении датафреймов, это не должно повлиять на ход исследования. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Провериям корректность считывания данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### df_calls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 39598 entries, 1 to 39598\n",
      "Data columns (total 6 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   task_id         39598 non-null  object\n",
      " 1   call_id         39598 non-null  object\n",
      " 2   agent_name      39598 non-null  object\n",
      " 3   call_dt         39598 non-null  object\n",
      " 4   call_result_id  39598 non-null  object\n",
      " 5   call_time_sec   39598 non-null  object\n",
      "dtypes: object(6)\n",
      "memory usage: 2.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df_calls.info()\n",
    "# данные прочитаны не совсем корректно, заменим тип данных для колонок [task_id,call_dt,call_result_id,call_result_id,call_time_sec]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 39598 entries, 1 to 39598\n",
      "Data columns (total 6 columns):\n",
      " #   Column          Non-Null Count  Dtype         \n",
      "---  ------          --------------  -----         \n",
      " 0   task_id         39598 non-null  int64         \n",
      " 1   call_id         39598 non-null  object        \n",
      " 2   agent_name      39598 non-null  object        \n",
      " 3   call_dt         39598 non-null  datetime64[ns]\n",
      " 4   call_result_id  39598 non-null  int64         \n",
      " 5   call_time_sec   39598 non-null  int64         \n",
      "dtypes: datetime64[ns](1), int64(3), object(2)\n",
      "memory usage: 2.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df_calls = df_calls.astype({'task_id' : 'int', 'call_dt' : 'datetime64', 'call_result_id': 'int','call_time_sec' : 'int' }, copy = True)\n",
    "df_calls.info() #преобразовали успешно, пропусков нет"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Данные от 2020-03-01 00:00:00 до 2020-05-30 00:00:00, разница в 90 days 00:00:00.\n"
     ]
    }
   ],
   "source": [
    "firts_date = df_calls['call_dt'].min()\n",
    "last_date = df_calls['call_dt'].max()\n",
    "print('Данные от %s до %s, разница в %s.' % (firts_date, last_date, last_date - firts_date))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# данные по звонкам представлены с 1 марта по 30 мая 2020 года"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### df_tasks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 23119 entries, 1 to 23119\n",
      "Data columns (total 5 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   task_id         23119 non-null  object\n",
      " 1   hid             23119 non-null  object\n",
      " 2   finish_dt_task  23119 non-null  object\n",
      " 3   base_id         23119 non-null  object\n",
      " 4   task_result_id  23119 non-null  object\n",
      "dtypes: object(5)\n",
      "memory usage: 1.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df_tasks.info()\n",
    "# аналогичная процедура для датафрейма df_tasks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 23119 entries, 1 to 23119\n",
      "Data columns (total 5 columns):\n",
      " #   Column          Non-Null Count  Dtype         \n",
      "---  ------          --------------  -----         \n",
      " 0   task_id         23119 non-null  int64         \n",
      " 1   hid             23119 non-null  object        \n",
      " 2   finish_dt_task  23119 non-null  datetime64[ns]\n",
      " 3   base_id         23119 non-null  int64         \n",
      " 4   task_result_id  23119 non-null  int64         \n",
      "dtypes: datetime64[ns](1), int64(3), object(1)\n",
      "memory usage: 1.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df_tasks = df_tasks.astype({'task_id':'int', 'finish_dt_task' : 'datetime64','base_id' : 'int' ,'task_result_id' : 'int' }, copy = True)\n",
    "df_tasks.info() #преобразовали успешно, пропусков нет"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Данные от 2020-04-01 00:00:00 до 2020-05-30 00:00:00, разница в 59 days 00:00:00.\n"
     ]
    }
   ],
   "source": [
    "firts_date = df_tasks['finish_dt_task'].min()\n",
    "last_date = df_tasks['finish_dt_task'].max()\n",
    "print('Данные от %s до %s, разница в %s.' % (firts_date, last_date, last_date - firts_date))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# данные по заданиям представлены с 1 апреля по 30 мая 2020 года"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### df_products"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 5999 entries, 1 to 5999\n",
      "Data columns (total 5 columns):\n",
      " #   Column           Non-Null Count  Dtype \n",
      "---  ------           --------------  ----- \n",
      " 0   hid              5999 non-null   object\n",
      " 1   product_type_cd  5999 non-null   object\n",
      " 2   approve_dt       3724 non-null   object\n",
      " 3   reject_dt        2264 non-null   object\n",
      " 4   using_dt         1961 non-null   object\n",
      "dtypes: object(5)\n",
      "memory usage: 281.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df_products.info()\n",
    "# аналогичная процедура для датафрейма df_products"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 5999 entries, 1 to 5999\n",
      "Data columns (total 5 columns):\n",
      " #   Column           Non-Null Count  Dtype         \n",
      "---  ------           --------------  -----         \n",
      " 0   hid              5999 non-null   object        \n",
      " 1   product_type_cd  5999 non-null   object        \n",
      " 2   approve_dt       3724 non-null   datetime64[ns]\n",
      " 3   reject_dt        2264 non-null   datetime64[ns]\n",
      " 4   using_dt         1961 non-null   datetime64[ns]\n",
      "dtypes: datetime64[ns](3), object(2)\n",
      "memory usage: 281.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df_products = df_products.astype({'approve_dt' : 'datetime64','reject_dt' : 'datetime64','using_dt' : 'datetime64', }, copy = True)\n",
    "df_products.info() #преобразовали успешно, пропусков нет"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020-04-01 00:00:00 2020-06-09 00:00:00\n"
     ]
    }
   ],
   "source": [
    "firts_date = (df_products[['approve_dt','reject_dt','using_dt']].min()).min()\n",
    "last_date = (df_products[['approve_dt','reject_dt','using_dt']].max()).max()\n",
    "print(firts_date, last_date)\n",
    "# print('Данные от %s до %s, разница в %s.' % (firts_date, last_date, last_date - firts_date))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Составить общую таблицу с данными из всех источников и словарей."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# выгрузим словари и разобъем их на таблицы\n",
    "df_dict = pd.read_excel('/Users/leonid/Downloads/Задание.xlsx', sheet_name='Словари', header = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>call_result_id</th>\n",
       "      <th>call_result_translation</th>\n",
       "      <th>Unnamed: 2</th>\n",
       "      <th>task_result_id</th>\n",
       "      <th>task_result_translation</th>\n",
       "      <th>Unnamed: 5</th>\n",
       "      <th>base_id</th>\n",
       "      <th>base_translation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6.0</td>\n",
       "      <td>Дозвон, Отложить</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7553.0</td>\n",
       "      <td>База 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.0</td>\n",
       "      <td>Недозвон</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>Отказ</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3145.0</td>\n",
       "      <td>База 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>Дозвон, Успешно</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>Недозвон</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3445.0</td>\n",
       "      <td>База 3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>Дозвон, Отказ</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>Дубль</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7554.0</td>\n",
       "      <td>База 4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>Дозвон, Перезвонить</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>Неуспешно из-за другой заявки</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4.0</td>\n",
       "      <td>Не было звонка</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7</td>\n",
       "      <td>Черный список</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>Не было звонка</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   call_result_id call_result_translation  Unnamed: 2  task_result_id  \\\n",
       "0             6.0        Дозвон, Отложить         NaN               6   \n",
       "1             5.0                Недозвон         NaN               5   \n",
       "2             3.0         Дозвон, Успешно         NaN               3   \n",
       "3             1.0           Дозвон, Отказ         NaN               1   \n",
       "4             2.0     Дозвон, Перезвонить         NaN               4   \n",
       "5             4.0          Не было звонка         NaN               7   \n",
       "6             NaN                     NaN         NaN               2   \n",
       "\n",
       "         task_result_translation  Unnamed: 5  base_id base_translation  \n",
       "0                        Успешно         NaN   7553.0           База 1  \n",
       "1                          Отказ         NaN   3145.0           База 2  \n",
       "2                       Недозвон         NaN   3445.0           База 3  \n",
       "3                          Дубль         NaN   7554.0           База 4  \n",
       "4  Неуспешно из-за другой заявки         NaN      NaN              NaN  \n",
       "5                  Черный список         NaN      NaN              NaN  \n",
       "6                 Не было звонка         NaN      NaN              NaN  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# создадим три отдельные таблицы, из них сделаем словри и позже применим функциию map для соответсвующих столбцов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "call_result_dict = df_dict[['call_result_id','call_result_translation']].dropna().set_index('call_result_id')['call_result_translation'].to_dict()\n",
    "task_result_dict = df_dict[['task_result_id','task_result_translation']].dropna().set_index('task_result_id')['task_result_translation'].to_dict()\n",
    "base_result_dict = df_dict[['base_id','base_translation']].dropna().set_index('base_id')['base_translation'].to_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{6.0: 'Дозвон, Отложить',\n",
       " 5.0: 'Недозвон',\n",
       " 3.0: 'Дозвон, Успешно',\n",
       " 1.0: 'Дозвон, Отказ',\n",
       " 2.0: 'Дозвон, Перезвонить',\n",
       " 4.0: 'Не было звонка'}"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "call_result_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_calls.call_result_id = df_calls.call_result_id.map(call_result_dict)\n",
    "df_tasks.task_result_id = df_tasks.task_result_id.map(task_result_dict)\n",
    "df_tasks.base_id = df_tasks.base_id.map(base_result_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# создиним три таблицы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df_calls.merge(df_tasks).merge(df_products, how = 'left').rename(columns = {'call_result_id' : 'call_result_translation', 'task_result_id' : 'task_result_translation' , 'base_id' : 'base_translation'})\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>task_id</th>\n",
       "      <th>call_id</th>\n",
       "      <th>agent_name</th>\n",
       "      <th>call_dt</th>\n",
       "      <th>call_result_translation</th>\n",
       "      <th>call_time_sec</th>\n",
       "      <th>hid</th>\n",
       "      <th>finish_dt_task</th>\n",
       "      <th>base_translation</th>\n",
       "      <th>task_result_translation</th>\n",
       "      <th>product_type_cd</th>\n",
       "      <th>approve_dt</th>\n",
       "      <th>reject_dt</th>\n",
       "      <th>using_dt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>843083337</td>\n",
       "      <td>6645916908#16711160876</td>\n",
       "      <td>sakungurceva</td>\n",
       "      <td>2020-03-01</td>\n",
       "      <td>Дозвон, Отложить</td>\n",
       "      <td>298</td>\n",
       "      <td>36d2f49fc49f572677416d54536a41c6</td>\n",
       "      <td>2020-04-15</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-04-22</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>843083337</td>\n",
       "      <td>6750206063#16711160876</td>\n",
       "      <td>sakungurceva</td>\n",
       "      <td>2020-03-17</td>\n",
       "      <td>Дозвон, Отложить</td>\n",
       "      <td>9</td>\n",
       "      <td>36d2f49fc49f572677416d54536a41c6</td>\n",
       "      <td>2020-04-15</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-04-22</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>843083337</td>\n",
       "      <td>6769109629#16711160876</td>\n",
       "      <td>sakungurceva</td>\n",
       "      <td>2020-03-24</td>\n",
       "      <td>Дозвон, Отложить</td>\n",
       "      <td>111</td>\n",
       "      <td>36d2f49fc49f572677416d54536a41c6</td>\n",
       "      <td>2020-04-15</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-04-22</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>843083337</td>\n",
       "      <td>6890964670#16711160876</td>\n",
       "      <td>sakungurceva</td>\n",
       "      <td>2020-04-15</td>\n",
       "      <td>Недозвон</td>\n",
       "      <td>7</td>\n",
       "      <td>36d2f49fc49f572677416d54536a41c6</td>\n",
       "      <td>2020-04-15</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-04-22</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>843083337</td>\n",
       "      <td>6926247810#16711160876</td>\n",
       "      <td>lapleshivenkova</td>\n",
       "      <td>2020-04-15</td>\n",
       "      <td>Дозвон, Успешно</td>\n",
       "      <td>1329</td>\n",
       "      <td>36d2f49fc49f572677416d54536a41c6</td>\n",
       "      <td>2020-04-15</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>INV</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-04-22</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39593</th>\n",
       "      <td>933035272</td>\n",
       "      <td>7124347282#18483260522</td>\n",
       "      <td>aztrofimova</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>Недозвон</td>\n",
       "      <td>0</td>\n",
       "      <td>9a2d6dd8ff0a11bdc7a65c8ded5d6d92</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Дубль</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39594</th>\n",
       "      <td>933040837</td>\n",
       "      <td>7123998330#18480990905</td>\n",
       "      <td>aztrofimova</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>Недозвон</td>\n",
       "      <td>9</td>\n",
       "      <td>3c682df2f35ed1dc634501b4b7ae25fe</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>База 4</td>\n",
       "      <td>Отказ</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39595</th>\n",
       "      <td>933040837</td>\n",
       "      <td>7124519269#18480990905</td>\n",
       "      <td>zadenis</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>Дозвон, Отказ</td>\n",
       "      <td>41</td>\n",
       "      <td>3c682df2f35ed1dc634501b4b7ae25fe</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>База 4</td>\n",
       "      <td>Отказ</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39596</th>\n",
       "      <td>933042718</td>\n",
       "      <td>7124237815#18482537123</td>\n",
       "      <td>npmoskalenko</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>Дозвон, Отказ</td>\n",
       "      <td>138</td>\n",
       "      <td>d6262e2d5840a2e68fcf028c9732606c</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Отказ</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39597</th>\n",
       "      <td>933065058</td>\n",
       "      <td>7123061624#18471818019</td>\n",
       "      <td>dakupriyanov</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>Дозвон, Успешно</td>\n",
       "      <td>276</td>\n",
       "      <td>1242029bded20eb92ffa31fd749d7ee4</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>INV</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>39598 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         task_id                 call_id       agent_name    call_dt  \\\n",
       "0      843083337  6645916908#16711160876     sakungurceva 2020-03-01   \n",
       "1      843083337  6750206063#16711160876     sakungurceva 2020-03-17   \n",
       "2      843083337  6769109629#16711160876     sakungurceva 2020-03-24   \n",
       "3      843083337  6890964670#16711160876     sakungurceva 2020-04-15   \n",
       "4      843083337  6926247810#16711160876  lapleshivenkova 2020-04-15   \n",
       "...          ...                     ...              ...        ...   \n",
       "39593  933035272  7124347282#18483260522      aztrofimova 2020-05-30   \n",
       "39594  933040837  7123998330#18480990905      aztrofimova 2020-05-30   \n",
       "39595  933040837  7124519269#18480990905          zadenis 2020-05-30   \n",
       "39596  933042718  7124237815#18482537123     npmoskalenko 2020-05-30   \n",
       "39597  933065058  7123061624#18471818019     dakupriyanov 2020-05-30   \n",
       "\n",
       "      call_result_translation  call_time_sec  \\\n",
       "0            Дозвон, Отложить            298   \n",
       "1            Дозвон, Отложить              9   \n",
       "2            Дозвон, Отложить            111   \n",
       "3                    Недозвон              7   \n",
       "4             Дозвон, Успешно           1329   \n",
       "...                       ...            ...   \n",
       "39593                Недозвон              0   \n",
       "39594                Недозвон              9   \n",
       "39595           Дозвон, Отказ             41   \n",
       "39596           Дозвон, Отказ            138   \n",
       "39597         Дозвон, Успешно            276   \n",
       "\n",
       "                                    hid finish_dt_task base_translation  \\\n",
       "0      36d2f49fc49f572677416d54536a41c6     2020-04-15           База 1   \n",
       "1      36d2f49fc49f572677416d54536a41c6     2020-04-15           База 1   \n",
       "2      36d2f49fc49f572677416d54536a41c6     2020-04-15           База 1   \n",
       "3      36d2f49fc49f572677416d54536a41c6     2020-04-15           База 1   \n",
       "4      36d2f49fc49f572677416d54536a41c6     2020-04-15           База 1   \n",
       "...                                 ...            ...              ...   \n",
       "39593  9a2d6dd8ff0a11bdc7a65c8ded5d6d92     2020-05-30           База 1   \n",
       "39594  3c682df2f35ed1dc634501b4b7ae25fe     2020-05-30           База 4   \n",
       "39595  3c682df2f35ed1dc634501b4b7ae25fe     2020-05-30           База 4   \n",
       "39596  d6262e2d5840a2e68fcf028c9732606c     2020-05-30           База 1   \n",
       "39597  1242029bded20eb92ffa31fd749d7ee4     2020-05-30           База 1   \n",
       "\n",
       "      task_result_translation product_type_cd approve_dt  reject_dt using_dt  \n",
       "0                     Успешно             INV        NaT 2020-04-22      NaT  \n",
       "1                     Успешно             INV        NaT 2020-04-22      NaT  \n",
       "2                     Успешно             INV        NaT 2020-04-22      NaT  \n",
       "3                     Успешно             INV        NaT 2020-04-22      NaT  \n",
       "4                     Успешно             INV        NaT 2020-04-22      NaT  \n",
       "...                       ...             ...        ...        ...      ...  \n",
       "39593                   Дубль             NaN        NaT        NaT      NaT  \n",
       "39594                   Отказ             NaN        NaT        NaT      NaT  \n",
       "39595                   Отказ             NaN        NaT        NaT      NaT  \n",
       "39596                   Отказ             NaN        NaT        NaT      NaT  \n",
       "39597                 Успешно             INV 2020-05-30        NaT      NaT  \n",
       "\n",
       "[39598 rows x 14 columns]"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False    39598\n",
       "dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().value_counts()\n",
    "# данные в целости\n",
    "# Перехожим к следующему заданию"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. На основе данных из таблицы, созданной по Заданию 1, необходимо расчитать общую воронку продаж за все время наблюдений по базам.\n",
    "2. Расчитать показатели сотрудников, количество звонков , продажную конверсию (\"Дозвон, Успешно\"/(\"Дозвон, Отказ\" + \"Дозвон, успешно\")), среднее время в звонке.\n",
    "3. На основе решения П.1 визуализировать полученные данные в виде графиков/диаграмм, сформировать выводы и предложения. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Дозвон, Отложить', 'Недозвон', 'Дозвон, Успешно', 'Дозвон, Отказ',\n",
       "       'Дозвон, Перезвонить', 'Не было звонка'], dtype=object)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.call_result_translation.unique()\n",
    "#  Так выглядят все варианты резульатов звонков"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Успешно', 'Отказ', 'Недозвон', 'Дубль',\n",
       "       'Неуспешно из-за другой заявки', 'Черный список', 'Не было звонка'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.task_result_translation.unique()\n",
    "# конечный результат по заданиям на дату выгрузки данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1 Рассчитаем общую воронку продаж (3 этапа)\n",
    "Для этого поставим вопросы на которые нам нужно будет ответить\n",
    "- У клиентов, статус звонка которых \"Дозвон, Успешно\", у нас есть дальнейший путь, какие этапы проходит пользователь? \n",
    "- Какие этапы воронки у нас? Сколько ползоватлей на каждом этапе и какая конверсия?\n",
    "- Зависят ли ключевые показатели от базы?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проведем небольшой исследовательский анализ данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # для тех пользваотлеей, которые имеют статус звонка 'Дозвон, Успешно', какие значения у результата задания и дальнейшего пути?\n",
    "# df[df.task_result_translation == 'Успешно'].task_id.drop_duplicates().reset_index().drop(columns = 'index')\\\n",
    "# .isin(\\\n",
    "#       df[df.call_result_translation == 'Дозвон, Успешно'].task_id.drop_duplicates().reset_index().drop(columns = 'index'))\\\n",
    "# .value_counts()\n",
    "# # для всех потенциальных клиентов, которые имеют статус звонка успешно, результат задания успешно"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>task_id</th>\n",
       "      <th>agent_name</th>\n",
       "      <th>call_dt</th>\n",
       "      <th>base_translation</th>\n",
       "      <th>call_result_translation</th>\n",
       "      <th>task_result_translation</th>\n",
       "      <th>call_time_sec</th>\n",
       "      <th>finish_dt_task</th>\n",
       "      <th>approve_dt</th>\n",
       "      <th>reject_dt</th>\n",
       "      <th>using_dt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>843083337</td>\n",
       "      <td>lapleshivenkova</td>\n",
       "      <td>2020-04-15</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Дозвон, Успешно</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>1329</td>\n",
       "      <td>2020-04-15</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-04-22</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>844351919</td>\n",
       "      <td>sakungurceva</td>\n",
       "      <td>2020-04-27</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Дозвон, Успешно</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>785</td>\n",
       "      <td>2020-04-27</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-05-27</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>849331398</td>\n",
       "      <td>nlkoroleva8457</td>\n",
       "      <td>2020-05-22</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Дозвон, Успешно</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>942</td>\n",
       "      <td>2020-05-22</td>\n",
       "      <td>2020-05-22</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>853629907</td>\n",
       "      <td>sftarasova</td>\n",
       "      <td>2020-04-01</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Дозвон, Успешно</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>902</td>\n",
       "      <td>2020-04-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-04-06</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>858061897</td>\n",
       "      <td>vskrivenko</td>\n",
       "      <td>2020-04-05</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Дозвон, Успешно</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>258</td>\n",
       "      <td>2020-04-05</td>\n",
       "      <td>2020-04-06</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39577</th>\n",
       "      <td>932925488</td>\n",
       "      <td>sftarasova</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Дозвон, Успешно</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>496</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-06-02</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39581</th>\n",
       "      <td>932942070</td>\n",
       "      <td>zadenis</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Дозвон, Успешно</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>189</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39582</th>\n",
       "      <td>932942477</td>\n",
       "      <td>sftarasova</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Дозвон, Успешно</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>152</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39584</th>\n",
       "      <td>932955888</td>\n",
       "      <td>ogmixajlenko</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Дозвон, Успешно</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>529</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39597</th>\n",
       "      <td>933065058</td>\n",
       "      <td>dakupriyanov</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>База 1</td>\n",
       "      <td>Дозвон, Успешно</td>\n",
       "      <td>Успешно</td>\n",
       "      <td>276</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6011 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         task_id       agent_name    call_dt base_translation  \\\n",
       "4      843083337  lapleshivenkova 2020-04-15           База 1   \n",
       "10     844351919     sakungurceva 2020-04-27           База 1   \n",
       "37     849331398   nlkoroleva8457 2020-05-22           База 1   \n",
       "53     853629907       sftarasova 2020-04-01           База 1   \n",
       "81     858061897       vskrivenko 2020-04-05           База 1   \n",
       "...          ...              ...        ...              ...   \n",
       "39577  932925488       sftarasova 2020-05-30           База 1   \n",
       "39581  932942070          zadenis 2020-05-30           База 1   \n",
       "39582  932942477       sftarasova 2020-05-30           База 1   \n",
       "39584  932955888     ogmixajlenko 2020-05-30           База 1   \n",
       "39597  933065058     dakupriyanov 2020-05-30           База 1   \n",
       "\n",
       "      call_result_translation task_result_translation  call_time_sec  \\\n",
       "4             Дозвон, Успешно                 Успешно           1329   \n",
       "10            Дозвон, Успешно                 Успешно            785   \n",
       "37            Дозвон, Успешно                 Успешно            942   \n",
       "53            Дозвон, Успешно                 Успешно            902   \n",
       "81            Дозвон, Успешно                 Успешно            258   \n",
       "...                       ...                     ...            ...   \n",
       "39577         Дозвон, Успешно                 Успешно            496   \n",
       "39581         Дозвон, Успешно                 Успешно            189   \n",
       "39582         Дозвон, Успешно                 Успешно            152   \n",
       "39584         Дозвон, Успешно                 Успешно            529   \n",
       "39597         Дозвон, Успешно                 Успешно            276   \n",
       "\n",
       "      finish_dt_task approve_dt  reject_dt using_dt  \n",
       "4         2020-04-15        NaT 2020-04-22      NaT  \n",
       "10        2020-04-27        NaT 2020-05-27      NaT  \n",
       "37        2020-05-22 2020-05-22        NaT      NaT  \n",
       "53        2020-04-01        NaT 2020-04-06      NaT  \n",
       "81        2020-04-05 2020-04-06        NaT      NaT  \n",
       "...              ...        ...        ...      ...  \n",
       "39577     2020-05-30        NaT 2020-06-02      NaT  \n",
       "39581     2020-05-30 2020-05-30        NaT      NaT  \n",
       "39582     2020-05-30 2020-05-30        NaT      NaT  \n",
       "39584     2020-05-30 2020-05-30        NaT      NaT  \n",
       "39597     2020-05-30 2020-05-30        NaT      NaT  \n",
       "\n",
       "[6011 rows x 11 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# какие этапы проходит пользователь после продажи\n",
    "df_for_funnel = df.loc[df.call_result_translation == 'Дозвон, Успешно',['task_id', 'agent_name','call_dt','base_translation','call_result_translation','task_result_translation','call_time_sec','finish_dt_task','approve_dt','reject_dt','using_dt']]\n",
    "df_for_funnel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "мы можем заметить, что есть пользовали которые отказались от продукта(тут возникает вопрос, на каком этапе воронки оказывается пользователь потом, можно было бы сделать выводы, понимая, чем является продукт и какие условия по оплате, это подписка или разовая покупка).\n",
    "\n",
    "Закрадывается предположение, что продукт - подписка на какой-либо сервис(Может быть услуги связи Тинькофф Мобайл)\n",
    "\n",
    "А колонка approve_dt - колонка обозначающая даты, когда был предоставлен доступ к сервису, \n",
    "\n",
    "reject_dt - отказ от использваония сервиса(подписки), \n",
    "\n",
    "using_dt - очевидно, дата начала использования продукта"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>task_id</th>\n",
       "      <th>call_dt</th>\n",
       "      <th>finish_dt_task</th>\n",
       "      <th>approve_dt</th>\n",
       "      <th>reject_dt</th>\n",
       "      <th>using_dt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>843083337</td>\n",
       "      <td>2020-04-15</td>\n",
       "      <td>2020-04-15</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-04-22</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>844351919</td>\n",
       "      <td>2020-04-27</td>\n",
       "      <td>2020-04-27</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-05-27</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>849331398</td>\n",
       "      <td>2020-05-22</td>\n",
       "      <td>2020-05-22</td>\n",
       "      <td>2020-05-22</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>853629907</td>\n",
       "      <td>2020-04-01</td>\n",
       "      <td>2020-04-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-04-06</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>858061897</td>\n",
       "      <td>2020-04-05</td>\n",
       "      <td>2020-04-05</td>\n",
       "      <td>2020-04-06</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39577</th>\n",
       "      <td>932925488</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-06-02</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39581</th>\n",
       "      <td>932942070</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39582</th>\n",
       "      <td>932942477</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39584</th>\n",
       "      <td>932955888</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39597</th>\n",
       "      <td>933065058</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6011 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         task_id    call_dt finish_dt_task approve_dt  reject_dt using_dt\n",
       "4      843083337 2020-04-15     2020-04-15        NaT 2020-04-22      NaT\n",
       "10     844351919 2020-04-27     2020-04-27        NaT 2020-05-27      NaT\n",
       "37     849331398 2020-05-22     2020-05-22 2020-05-22        NaT      NaT\n",
       "53     853629907 2020-04-01     2020-04-01        NaT 2020-04-06      NaT\n",
       "81     858061897 2020-04-05     2020-04-05 2020-04-06        NaT      NaT\n",
       "...          ...        ...            ...        ...        ...      ...\n",
       "39577  932925488 2020-05-30     2020-05-30        NaT 2020-06-02      NaT\n",
       "39581  932942070 2020-05-30     2020-05-30 2020-05-30        NaT      NaT\n",
       "39582  932942477 2020-05-30     2020-05-30 2020-05-30        NaT      NaT\n",
       "39584  932955888 2020-05-30     2020-05-30 2020-05-30        NaT      NaT\n",
       "39597  933065058 2020-05-30     2020-05-30 2020-05-30        NaT      NaT\n",
       "\n",
       "[6011 rows x 6 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_for_funnel_dates  = df_for_funnel[['task_id','call_dt','finish_dt_task','approve_dt','reject_dt','using_dt']]\n",
    "df_for_funnel_dates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "task_id           3724\n",
       "call_dt           3724\n",
       "finish_dt_task    3724\n",
       "approve_dt        3724\n",
       "reject_dt            0\n",
       "using_dt          1953\n",
       "dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_for_funnel_dates[~df_for_funnel_dates.approve_dt.isna()].count()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Не все пользователи, которые получили продукт, использовали его\n",
    "\n",
    "3724 покупателя получили продукт, 1953 воспользовались"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False    6011\n",
       "dtype: int64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_for_funnel.duplicated().value_counts() \n",
    "# дубликатов не найдено, значит нет повторных покупок\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "task_id           2264\n",
       "call_dt           2264\n",
       "finish_dt_task    2264\n",
       "approve_dt           0\n",
       "reject_dt         2264\n",
       "using_dt             8\n",
       "dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_for_funnel_dates[~df_for_funnel_dates.reject_dt.isna()].count()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2264 покупателя отказались от продукта. \n",
    "При этом 8 из них воспользовались продуктом и отказались\n",
    "\n",
    "Дальше будем вычислять в каком промежутке это произошло \n",
    "\n",
    "Значит ли это, что был возврат средств? *так как у нас нет пользователей которые отказались после получения \n",
    "продукта, как будто был возврат и approve аннулировался\n",
    "\n",
    "Тогда, видимо, дата в approve_dt означает что это настоящий покупатель  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>task_id</th>\n",
       "      <th>finish_dt_task</th>\n",
       "      <th>approve_dt</th>\n",
       "      <th>reject_dt</th>\n",
       "      <th>using_dt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>843083337</td>\n",
       "      <td>2020-04-15</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-04-22</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>844351919</td>\n",
       "      <td>2020-04-27</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-05-27</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>849331398</td>\n",
       "      <td>2020-05-22</td>\n",
       "      <td>2020-05-22</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>853629907</td>\n",
       "      <td>2020-04-01</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-04-06</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>858061897</td>\n",
       "      <td>2020-04-05</td>\n",
       "      <td>2020-04-06</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39577</th>\n",
       "      <td>932925488</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-06-02</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39581</th>\n",
       "      <td>932942070</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39582</th>\n",
       "      <td>932942477</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39584</th>\n",
       "      <td>932955888</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39597</th>\n",
       "      <td>933065058</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6011 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         task_id finish_dt_task approve_dt  reject_dt using_dt\n",
       "4      843083337     2020-04-15        NaT 2020-04-22      NaT\n",
       "10     844351919     2020-04-27        NaT 2020-05-27      NaT\n",
       "37     849331398     2020-05-22 2020-05-22        NaT      NaT\n",
       "53     853629907     2020-04-01        NaT 2020-04-06      NaT\n",
       "81     858061897     2020-04-05 2020-04-06        NaT      NaT\n",
       "...          ...            ...        ...        ...      ...\n",
       "39577  932925488     2020-05-30        NaT 2020-06-02      NaT\n",
       "39581  932942070     2020-05-30 2020-05-30        NaT      NaT\n",
       "39582  932942477     2020-05-30 2020-05-30        NaT      NaT\n",
       "39584  932955888     2020-05-30 2020-05-30        NaT      NaT\n",
       "39597  933065058     2020-05-30 2020-05-30        NaT      NaT\n",
       "\n",
       "[6011 rows x 5 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# выведем датафрейм с датами, чтобы отследить более детально действия пользоватлел\n",
    "df_for_funnel[['task_id','finish_dt_task','approve_dt','reject_dt','using_dt']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Мы можем точно определить следующие этапы вопронки:\n",
    "- База (потенциальные покупатели, которые есть в базе)\n",
    "- Дозвон (все информированные люди, до которых удалось дозвониться)\n",
    "- Продажа (все люди, которые купили продукт)\n",
    "\n",
    "\n",
    "- Онбординг (те люди, кто получил продукт и не сделали возврат)\n",
    "- Пользователи (те, кто воспользовались продуктом)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Создадим матрицу фиктивных переменных для воронки, затем высчиатем значения для решения первого пункта"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Каждый пользователь находится в базе, поэтому все значения столбца st1_base будут равны 1\n",
    "df['st_base'] = np.zeros(df.shape[0], dtype = 'int')+1\n",
    "\n",
    "# Все, до кого дозвонились хотя бы 1 раз, были на этапе 2, \"Дозвон\"\n",
    "calles_users_id = df[df.call_result_translation.isin(['Дозвон, Отложить', 'Дозвон, Успешно', 'Дозвон, Отказ',\n",
    "       'Дозвон, Перезвонить'])].task_id.unique()\n",
    "df['st_called'] = np.where(df.task_id.isin(calles_users_id), 1, 0)\n",
    "\n",
    "#  Для всех, кто имеет статус успешно, была совершена продажа, отразим это в датафрейме\n",
    "df['st_buy'] = np.where(df.task_result_translation == 'Успешно', 1,0)\n",
    "\n",
    "#  Онбординг\n",
    "df['st_onboarding'] = np.where((df.task_result_translation == 'Успешно') & (~df.approve_dt.isna()) , 1,0)\n",
    "\n",
    "# Пользователи\n",
    "df['st_users'] = np.where((df.task_result_translation == 'Успешно') & (~df.approve_dt.isna()) &(~df.using_dt.isna()) , 1,0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stage</th>\n",
       "      <th>quantity</th>\n",
       "      <th>conversion</th>\n",
       "      <th>cum_conversion</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>st_base</td>\n",
       "      <td>23119</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>st_called</td>\n",
       "      <td>18807</td>\n",
       "      <td>0.813487</td>\n",
       "      <td>0.813487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>st_buy</td>\n",
       "      <td>6011</td>\n",
       "      <td>0.319615</td>\n",
       "      <td>0.260003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>st_onboarding</td>\n",
       "      <td>3724</td>\n",
       "      <td>0.619531</td>\n",
       "      <td>0.161080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>st_users</td>\n",
       "      <td>1953</td>\n",
       "      <td>0.524436</td>\n",
       "      <td>0.084476</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           stage  quantity  conversion  cum_conversion\n",
       "0        st_base     23119         NaN        1.000000\n",
       "1      st_called     18807    0.813487        0.813487\n",
       "2         st_buy      6011    0.319615        0.260003\n",
       "3  st_onboarding      3724    0.619531        0.161080\n",
       "4       st_users      1953    0.524436        0.084476"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  создадим датафрейм c этапами воронки\n",
    "df_task_stages_marix = df.iloc[:,0].to_frame().join(df.iloc[:,-5:]).drop_duplicates()\n",
    "df_funnel = df_task_stages_marix.iloc[:,-5:].sum().to_frame().reset_index().rename(columns = {0 : 'quantity', 'index' : 'stage'})\n",
    "df_funnel\n",
    "\n",
    "# Добавим конверсии между этапами\n",
    "q1 = df_funnel.iloc[:,1].reset_index().drop(columns = ['index'])\n",
    "q1.index = q1.index +1\n",
    "df_funnel['q1'] = q1\n",
    "\n",
    "df_funnel['q1'] = df_funnel.quantity/df_funnel['q1']\n",
    "df_funnel = df_funnel.rename(columns ={'q1': 'conversion'})\n",
    "df_funnel['cum_conversion'] = df_funnel.quantity/  df_funnel.iloc[0,1]\n",
    "df_funnel\n",
    "# df_funnel.q1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Попробуем сравнить конверсии для разных баз"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "База 1    21980\n",
       "База 4     1139\n",
       "Name: base_translation, dtype: int64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  а какие базы у нас есть в датафрейме?\n",
    "df[['task_id', 'base_translation']].drop_duplicates().base_translation.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stage</th>\n",
       "      <th>quantity</th>\n",
       "      <th>conversion</th>\n",
       "      <th>cum_conversion</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>st_base</td>\n",
       "      <td>21980</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>st_called</td>\n",
       "      <td>17897</td>\n",
       "      <td>0.814240</td>\n",
       "      <td>0.814240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>st_buy</td>\n",
       "      <td>5560</td>\n",
       "      <td>0.310667</td>\n",
       "      <td>0.252957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>st_onboarding</td>\n",
       "      <td>3537</td>\n",
       "      <td>0.636151</td>\n",
       "      <td>0.160919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>st_users</td>\n",
       "      <td>1869</td>\n",
       "      <td>0.528414</td>\n",
       "      <td>0.085032</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           stage  quantity  conversion  cum_conversion\n",
       "0        st_base     21980         NaN        1.000000\n",
       "1      st_called     17897    0.814240        0.814240\n",
       "2         st_buy      5560    0.310667        0.252957\n",
       "3  st_onboarding      3537    0.636151        0.160919\n",
       "4       st_users      1869    0.528414        0.085032"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  создадим датафрейм c этапами воронки\n",
    "# отдельно вынесем запрос\n",
    "que_b1 = df.base_translation == 'База 1'\n",
    "df_task_stages_marix = df[que_b1].iloc[:,0].to_frame().join(df.iloc[:,-5:]).drop_duplicates()\n",
    "df_funnel = df_task_stages_marix.iloc[:,-5:].sum().to_frame().reset_index().rename(columns = {0 : 'quantity', 'index' : 'stage'})\n",
    "\n",
    "# Добавим конверсии между этапами\n",
    "q1 = df_funnel.iloc[:,1].reset_index().drop(columns = ['index'])\n",
    "q1.index = q1.index +1\n",
    "df_funnel['q1'] = q1\n",
    "\n",
    "df_funnel['q1'] = df_funnel.quantity/df_funnel['q1']\n",
    "df_funnel['cum_conversion'] = df_funnel.quantity/  df_funnel.iloc[0,1]\n",
    "df_funnel_b1 = df_funnel.rename(columns ={'q1': 'conversion'})\n",
    "df_funnel_b1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stage</th>\n",
       "      <th>quantity</th>\n",
       "      <th>conversion</th>\n",
       "      <th>cum_conversion</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>st_base</td>\n",
       "      <td>1139</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>st_called</td>\n",
       "      <td>910</td>\n",
       "      <td>0.798946</td>\n",
       "      <td>0.798946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>st_buy</td>\n",
       "      <td>451</td>\n",
       "      <td>0.495604</td>\n",
       "      <td>0.395961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>st_onboarding</td>\n",
       "      <td>187</td>\n",
       "      <td>0.414634</td>\n",
       "      <td>0.164179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>st_users</td>\n",
       "      <td>84</td>\n",
       "      <td>0.449198</td>\n",
       "      <td>0.073749</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           stage  quantity  conversion  cum_conversion\n",
       "0        st_base      1139         NaN        1.000000\n",
       "1      st_called       910    0.798946        0.798946\n",
       "2         st_buy       451    0.495604        0.395961\n",
       "3  st_onboarding       187    0.414634        0.164179\n",
       "4       st_users        84    0.449198        0.073749"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  создадим датафрейм c этапами воронки\n",
    "# отдельно вынесем запрос\n",
    "que_b1 = df.base_translation == 'База 4'\n",
    "df_task_stages_marix = df[que_b1].iloc[:,0].to_frame().join(df.iloc[:,-5:]).drop_duplicates()\n",
    "df_funnel = df_task_stages_marix.iloc[:,-5:].sum().to_frame().reset_index().rename(columns = {0 : 'quantity', 'index' : 'stage'})\n",
    "\n",
    "# Добавим конверсии между этапами\n",
    "q1 = df_funnel.iloc[:,1].reset_index().drop(columns = ['index'])\n",
    "q1.index = q1.index +1\n",
    "df_funnel['q1'] = q1\n",
    "\n",
    "df_funnel['q1'] = df_funnel.quantity/df_funnel['q1']\n",
    "df_funnel['cum_conversion'] = df_funnel.quantity/  df_funnel.iloc[0,1]\n",
    "df_funnel_b4 = df_funnel.rename(columns ={'q1': 'conversion'})\n",
    "df_funnel_b4\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stage</th>\n",
       "      <th>quantity1</th>\n",
       "      <th>quantity4</th>\n",
       "      <th>conversion1</th>\n",
       "      <th>conversion4</th>\n",
       "      <th>cum_conversion1</th>\n",
       "      <th>cum_conversion4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>st_base</td>\n",
       "      <td>21980</td>\n",
       "      <td>1139</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>st_called</td>\n",
       "      <td>17897</td>\n",
       "      <td>910</td>\n",
       "      <td>0.814240</td>\n",
       "      <td>0.798946</td>\n",
       "      <td>0.814240</td>\n",
       "      <td>0.798946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>st_buy</td>\n",
       "      <td>5560</td>\n",
       "      <td>451</td>\n",
       "      <td>0.310667</td>\n",
       "      <td>0.495604</td>\n",
       "      <td>0.252957</td>\n",
       "      <td>0.395961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>st_onboarding</td>\n",
       "      <td>3537</td>\n",
       "      <td>187</td>\n",
       "      <td>0.636151</td>\n",
       "      <td>0.414634</td>\n",
       "      <td>0.160919</td>\n",
       "      <td>0.164179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>st_users</td>\n",
       "      <td>1869</td>\n",
       "      <td>84</td>\n",
       "      <td>0.528414</td>\n",
       "      <td>0.449198</td>\n",
       "      <td>0.085032</td>\n",
       "      <td>0.073749</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           stage  quantity1  quantity4  conversion1  conversion4  \\\n",
       "0        st_base      21980       1139          NaN          NaN   \n",
       "1      st_called      17897        910     0.814240     0.798946   \n",
       "2         st_buy       5560        451     0.310667     0.495604   \n",
       "3  st_onboarding       3537        187     0.636151     0.414634   \n",
       "4       st_users       1869         84     0.528414     0.449198   \n",
       "\n",
       "   cum_conversion1  cum_conversion4  \n",
       "0         1.000000         1.000000  \n",
       "1         0.814240         0.798946  \n",
       "2         0.252957         0.395961  \n",
       "3         0.160919         0.164179  \n",
       "4         0.085032         0.073749  "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_comp_funnel = df_funnel_b1.merge(df_funnel_b4, on = 'stage', suffixes=('1', '4')).iloc[:,[0,1,4,2,5,3,6]]\n",
    "df_comp_funnel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "При сравнении воронок двух баз мы замечаем, что в 4 базе, которая составляет всего 1139 человек, конверсия на посленем этапе выше на 18%. На общей выборке это на 14% больше!!!\n",
    "\n",
    "Есть смысл проверить эту гипотеу статистически"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "H0: Конверсии между 1 базой и 4 базой не отличаются\n",
    "\n",
    "H1: Конверсии между 1 базой и 4 базой имеют статистически значимые различия"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "282.70697"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "910*0.310667 # ожиданием значение конверсии последнего этапа"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Power_divergenceResult(statistic=38.60198295046986, pvalue=5.19661003355646e-10)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st.chisquare([282.70697,451]) \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "P уровень значимости сильно меньше 0.05, сделовательно отклоняем нулевую гипотезу \n",
    "\n",
    "! Конверсии между 1 базой и 4 базой имеют статистически значимые различия\n",
    "\n",
    "Поэтому, если есть возможность увеличить объем 4 базы, стоит проверить гипотезу\n",
    "\n",
    "Но если мы посмотрим на конверсию в онбординг и пользователя, в случае 4 базы показатели не сильно отличаются"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2 Расчитать показатели сотрудников, количество звонков , продажную конверсию (\"Дозвон, Успешно\"/(\"Дозвон, Отказ\" + \"Дозвон, успешно\")), среднее время в звонке.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>calls_count</th>\n",
       "      <th>conversion</th>\n",
       "      <th>mean_duration</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>agent_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>aashapovalov64931</th>\n",
       "      <td>549</td>\n",
       "      <td>0.404908</td>\n",
       "      <td>100.147541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>afgluxov</th>\n",
       "      <td>263</td>\n",
       "      <td>0.516484</td>\n",
       "      <td>137.117871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>amshevchenko</th>\n",
       "      <td>18</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>206.555556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arxackevich</th>\n",
       "      <td>529</td>\n",
       "      <td>0.418605</td>\n",
       "      <td>140.096408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>asmirov</th>\n",
       "      <td>369</td>\n",
       "      <td>0.444444</td>\n",
       "      <td>138.783198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yuapodorueva</th>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>40.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yugdulova</th>\n",
       "      <td>210</td>\n",
       "      <td>0.383721</td>\n",
       "      <td>142.895238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yuktixonova</th>\n",
       "      <td>240</td>\n",
       "      <td>0.436782</td>\n",
       "      <td>74.633333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yuvbabina</th>\n",
       "      <td>139</td>\n",
       "      <td>0.486486</td>\n",
       "      <td>130.366906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zadenis</th>\n",
       "      <td>1997</td>\n",
       "      <td>0.537178</td>\n",
       "      <td>90.095643</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>106 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   calls_count  conversion  mean_duration\n",
       "agent_name                                               \n",
       "aashapovalov64931          549    0.404908     100.147541\n",
       "afgluxov                   263    0.516484     137.117871\n",
       "amshevchenko                18    0.250000     206.555556\n",
       "arxackevich                529    0.418605     140.096408\n",
       "asmirov                    369    0.444444     138.783198\n",
       "...                        ...         ...            ...\n",
       "yuapodorueva                 5         NaN      40.000000\n",
       "yugdulova                  210    0.383721     142.895238\n",
       "yuktixonova                240    0.436782      74.633333\n",
       "yuvbabina                  139    0.486486     130.366906\n",
       "zadenis                   1997    0.537178      90.095643\n",
       "\n",
       "[106 rows x 3 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# посчитем простые метрики для агентов: количество звонков и их средняя длительность\n",
    "agents_report = df.groupby('agent_name').agg({'call_id' : 'count', 'call_time_sec' : 'mean'}).rename(columns = {'call_id' : 'calls_count', 'call_time_sec' : 'mean_duration'})\n",
    "agents_report\n",
    "\n",
    "# посчитаем конверсию\n",
    "agents_efficiency = df[df.call_result_translation == 'Дозвон, Успешно']\\\n",
    ".groupby('agent_name')\\\n",
    ".agg({'call_id': 'count'})\\\n",
    ".rename(columns = {'call_id' : 'sales_count'})\\\n",
    ".merge(df[df.call_result_translation == 'Дозвон, Отказ']\\\n",
    "       .groupby('agent_name')\\\n",
    "       .agg({'call_id': 'count'})\\\n",
    "       .rename(columns = {'call_id' : 'refuse_count'}),\\\n",
    "      on = 'agent_name')\n",
    "#присоединим датафрейм со столбцом отказов\n",
    "agents_efficiency['conversion'] = agents_efficiency.sales_count  /(agents_efficiency.sales_count+agents_efficiency.refuse_count)\n",
    "# посчитали конверсию\n",
    "agents_efficiency = agents_efficiency.drop(columns = ['sales_count','refuse_count'])\n",
    "agents_efficiency\n",
    "\n",
    "# объединим датафреймы\n",
    "agents_report = agents_report.merge(agents_efficiency, on='agent_name', how = 'left').iloc[:, [0,2,1]]\n",
    "agents_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "calls_count  conversion  mean_duration\n",
       "False        False       False            90\n",
       "             True        False            16\n",
       "dtype: int64"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agents_report.isna().value_counts()\n",
    "# обратим внимание что есть менеджеры вообще без успешных звонков"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>calls_count</th>\n",
       "      <th>conversion</th>\n",
       "      <th>mean_duration</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>agent_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>takosova72025</th>\n",
       "      <td>92</td>\n",
       "      <td>0.620690</td>\n",
       "      <td>133.369565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mnafonina</th>\n",
       "      <td>132</td>\n",
       "      <td>0.617647</td>\n",
       "      <td>124.795455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>isivanova94998</th>\n",
       "      <td>775</td>\n",
       "      <td>0.587537</td>\n",
       "      <td>130.100645</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tiseregina</th>\n",
       "      <td>1001</td>\n",
       "      <td>0.569767</td>\n",
       "      <td>71.382617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lapleshivenkova</th>\n",
       "      <td>376</td>\n",
       "      <td>0.568493</td>\n",
       "      <td>194.638298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ogsorokoletova28872</th>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>189.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ssshamuratova</th>\n",
       "      <td>68</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.191176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tavnukova</th>\n",
       "      <td>20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.150000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tvleskovec</th>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>65.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yuapodorueva</th>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>40.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>106 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     calls_count  conversion  mean_duration\n",
       "agent_name                                                 \n",
       "takosova72025                 92    0.620690     133.369565\n",
       "mnafonina                    132    0.617647     124.795455\n",
       "isivanova94998               775    0.587537     130.100645\n",
       "tiseregina                  1001    0.569767      71.382617\n",
       "lapleshivenkova              376    0.568493     194.638298\n",
       "...                          ...         ...            ...\n",
       "ogsorokoletova28872            4         NaN     189.500000\n",
       "ssshamuratova                 68         NaN      32.191176\n",
       "tavnukova                     20         NaN      21.150000\n",
       "tvleskovec                     3         NaN      65.333333\n",
       "yuapodorueva                   5         NaN      40.000000\n",
       "\n",
       "[106 rows x 3 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agents_report.sort_values('conversion', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
